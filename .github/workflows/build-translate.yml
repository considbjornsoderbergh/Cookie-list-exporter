name: Build & Translate Cookie Data

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - 'excel-to-json.py'
      - 'json_translator_rewrite.py'
      - 'translation_key.json'
      - '**.xlsx'
      - '.github/workflows/build-translate.yml'
      - 'requirements.txt'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: bash
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas openpyxl python-dateutil
          fi

      # Step 1: Excel -> converted_cookie_data.json
      - name: Convert Excel to converted_cookie_data.json
        shell: bash
        run: |
          python excel-to-json.py
          test -f converted_cookie_data.json || { echo "::error::converted_cookie_data.json was not created"; exit 1; }

      # Step 2: Translate JSON into all locales (pretty + minified)
      - name: Generate localized JSONs (pretty + minified)
        id: translate
        shell: bash
        run: |
          set -euo pipefail

          # Force-safe: script handles existing files named 'out'/'minified'
          python json_translator_rewrite.py --translate_keys --force

          OUT_DIR="out"
          MIN_DIR="minified"

          # Fallback if script created timestamped directories
          if [ ! -d "$OUT_DIR" ]; then
            OUT_DIR="$(ls -d out_build-* 2>/dev/null | head -n1 || true)"
          fi
          if [ ! -d "$MIN_DIR" ]; then
            MIN_DIR="$(ls -d minified_build-* 2>/dev/null | head -n1 || true)"
          fi

          if [ -z "$OUT_DIR" ] || [ ! -d "$OUT_DIR" ]; then
            echo "::error::Pretty output directory not found."
            exit 1
          fi
          if [ -z "$MIN_DIR" ] || [ ! -d "$MIN_DIR" ]; then
            echo "::error::Minified output directory not found."
            exit 1
          fi

          echo "out_dir=$OUT_DIR" >> "$GITHUB_OUTPUT"
          echo "min_dir=$MIN_DIR" >> "$GITHUB_OUTPUT"

      # Step 3: Export only the pretty JSONs (out/) to CSV for proofreading
      - name: Export translated JSONs (out/) to CSV (one per locale)
        shell: bash
        env:
          OUT_DIR: ${{ steps.translate.outputs.out_dir }}
        run: |
          set -euo pipefail
          mkdir -p proofread_csv
          python - << 'PY'
import json, csv, os, sys, glob

out_dir = os.environ.get("OUT_DIR", "out")
dest = "proofread_csv"
os.makedirs(dest, exist_ok=True)

files = sorted(glob.glob(os.path.join(out_dir, "cookie_data_*.json")))
if not files:
    print("No translated JSONs found in", out_dir, file=sys.stderr)
    sys.exit(1)

for path in files:
    locale = os.path.splitext(os.path.basename(path))[0].replace("cookie_data_", "")
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)

    # Collect localized column names across cookie_list items
    dynamic_cols = set()
    for block in data.get("notice_table", []):
        for item in block.get("cookie_list", []):
            dynamic_cols.update(item.keys())
    dynamic_cols = list(dynamic_cols)

    header = ["cookie_category", "category_description"] + dynamic_cols
    rows = []
    for block in data.get("notice_table", []):
        cat = block.get("cookie_category", "")
        desc = block.get("category_description", "")
        for item in block.get("cookie_list", []):
            row = {h: "" for h in header}
            row["cookie_category"] = cat
            row["category_description"] = desc
            for k, v in item.items():
                row[k] = v
            rows.append(row)

    csv_path = os.path.join(dest, f"{locale}.csv")
    with open(csv_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=header)
        writer.writeheader()
        writer.writerows(rows)
    print("Wrote", csv_path)
PY
          ls -la proofread_csv | head -n 50 || true

      # Step 4: Upload artifacts
      - name: Upload pretty JSONs (out/)
        uses: actions/upload-artifact@v4
        with:
          name: cookie-jsons-pretty
          path: ${{ steps.translate.outputs.out_dir }}
          if-no-files-found: error

      - name: Upload minified JSONs (minified/)
        uses: actions/upload-artifact@v4
        with:
          name: cookie-jsons-minified
          path: ${{ steps.translate.outputs.min_dir }}
          if-no-files-found: error

      - name: Upload proofreading CSVs
        uses: actions/upload-artifact@v4
        with:
          name: translated-csv-proofread
          path: proofread_csv/
          if-no-files-found: error
